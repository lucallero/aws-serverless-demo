service: book-store # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10

functions:
  book-new:
    handler: handler.book-new    

plugins:
  - serverless-appsync-plugin


custom:
  appSync:
    name: ABooksAPI # defaults to api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS 
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: us-east-1 # required # region
      defaultAction: ALLOW
      userPoolId: us-east-1_Vfi1RcwYQ # required # user pool ID
      #appIdClientRegex: # optional
      region: us-east-1 # defaults to provider region    
    #logConfig:
    #  loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
    #  level: ERROR # Logging Level: NONE | ERROR | ALL
    mappingTemplatesLocation: mapping-templates # defaults to mapping-templates
    mappingTemplates:
      - dataSource: BookTable # data source name
        type: Query # type name in schema (e.g. Query, Mutation, Subscription)
        field: getBook
        request: getBook.vtl # request mapping template name
        response: common-response.vtl # response mapping template name
      - dataSource: BookTable # data source name
        type: Query # type name in schema (e.g. Query, Mutation, Subscription)
        field: listBooks
        request: listBooks.vtl # request mapping template name
        response: common-response.vtl # response mapping template name  
      - dataSource: BookTable # data source name
        type: Mutation # type name in schema (e.g. Query, Mutation, Subscription)
        field: createBook
        request: createBook.vtl # request mapping template name
        response: common-response.vtl # response mapping template name        
      - dataSource: BookTable # data source name
        type: Mutation # type name in schema (e.g. Query, Mutation, Subscription)
        field: updateBook
        request: updateBook.vtl # request mapping template name
        response: common-response.vtl # response mapping template name       
      - dataSource: BookTable # data source name
        type: Mutation # type name in schema (e.g. Query, Mutation, Subscription)
        field: deleteBook
        request: deleteBook.vtl # request mapping template name
        response: common-response.vtl # response mapping template name                                 
    schema: schema.graphql # defaults schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: BookTable # data source name
        description: Books table datasource # DynamoDB Table Description
        config:
          tableName: BookTable  # Where MyTable is a dynamodb table defined in Resources
          serviceRoleArn: arn:aws:iam::501786648836:role/service-role/appsync-ds-ddb-tru2n3-BookTable  # Where AppSyncDynamoDBServiceRole is an IAM role defined in Resources
          # iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
          #   - Effect: "Allow"
          #     Action:
          #       - "dynamodb:GetItem"
          #     Resource:
          #       - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable"
          #       - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:myTable/*"
              
          # region: # Overwrite default region for this data source
    # substitutions: # allows to pass variables from here to velocity templates
      # ${exampleVar1} will be replaced with given value in all mapping templates
      # exampleVar1: "${self:service.name}"
      # exampleVar2: {'Fn::ImportValue': 'Some-external-stuff'}
      